buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'shadow'
apply plugin: 'maven'

sourceCompatibility = 1.7
encoding = 'UTF-8'

group = 'com.machinelinking'
version = '1.0-SNAPSHOT'

serverClassName = 'com.machinelinking.service.BasicServer'
storageClassName = 'com.machinelinking.storage.DefaultJSONStorageLoader'


shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

jar {
    manifest {
        attributes 'Main-Class': serverClassName
    }
}

tasks.withType(Compile){
    options.encoding = encoding
}

tasks.withType(Javadoc){
    options.encoding = encoding
}

repositories {
    mavenCentral()
}

dependencies {
    // dependencies
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version:'1.9.6'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'org.apache.commons', name: 'commons-compress', version:'1.0'
    compile group: 'org.python', name: 'jython', version:'2.7-b1'
    compile group: 'com.beust', name: 'jcommander', version:'1.29'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version:'2.9.3'
    compile group: 'org.elasticsearch', name: 'elasticsearch', version:'1.0.1'
    compile group: 'org.apache.velocity', name: 'velocity', version:'1.7'
    compile group: 'javax.servlet', name: 'servlet-api', version:'2.5'
    compile group: 'com.sun.jersey', name: 'jersey-core', version:'1.18.1'
    compile group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.18.1'
    compile group: 'com.sun.jersey', name: 'jersey-servlet', version:'1.18.1'
    compile group: 'com.sun.jersey', name: 'jersey-json', version:'1.18.1'
    compile group: 'com.sun.jersey', name: 'jersey-grizzly2', version:'1.18.1'

    // testing dependencies
    testCompile group: 'junit', name: 'junit', version:'4.7'
}

task runLoader(dependsOn: 'jar', type: JavaExec) {
  main = storageClassName
  classpath = sourceSets.main.runtimeClasspath
  if(project.hasProperty("config") && project.hasProperty("dump"))
    args(config, dump)
}